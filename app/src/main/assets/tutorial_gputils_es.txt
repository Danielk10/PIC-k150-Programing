INSTALACI√ìN DE GPUTILS 1.5.2 EN TERMUX PARA ANDROID
Para Termux versi√≥n Google Play


üìã Contenido
1. Actualizar Repositorios
2. Instalar Dependencias
3. Descargar C√≥digo Fuente
4. Extraer Archivos
5. Configurar el Proyecto
6. Compilar GPUTILS
7. Instalar GPUTILS
8. Verificar Instalaci√≥n
9. Compilar Programa para PIC
10. Copiar Archivo HEX



üì¶ PASO 1: Actualizar Repositorios de Termux

Abre la aplicaci√≥n Termux y actualiza los paquetes del sistema para asegurar que tengas las versiones m√°s recientes:

pkg update && pkg upgrade -y

‚ÑπÔ∏è Notas Importantes:
‚Ä¢ Este comando descarga e instala las actualizaciones m√°s recientes de todos los paquetes
‚Ä¢ El par√°metro -y responde autom√°ticamente "s√≠" a cualquier pregunta de confirmaci√≥n
‚Ä¢ Esto garantiza que tu Termux tiene todas las correcciones de seguridad necesarias

üîê Configurar Acceso al Almacenamiento:
Otorga permisos de almacenamiento a Termux para que pueda acceder a tus archivos:

termux-setup-storage

‚ÑπÔ∏è Explicaci√≥n:
Este comando crea un enlace simb√≥lico a tu almacenamiento externo. Necesitar√°s aceptar el permiso en tu dispositivo Android.



üîß PASO 2: Instalar Dependencias Necesarias

Instala las herramientas de compilaci√≥n requeridas para compilar gputils. Ejecuta los siguientes comandos:

pkg install build-essential clang make wget tar bzip2 -y

üìã Paquetes Instalados:
‚Ä¢ build-essential: Contiene herramientas b√°sicas de compilaci√≥n (gcc, g++, etc.)
‚Ä¢ clang: Compilador moderno de C/C++ alternativo a GCC (compatible con Termux)
‚Ä¢ make: Herramienta de automatizaci√≥n que ejecuta instrucciones de compilaci√≥n
‚Ä¢ wget: Descarga archivos desde Internet usando l√≠nea de comandos
‚Ä¢ tar/bzip2: Herramientas para extraer archivos comprimidos

Luego instala las utilidades binarias:

pkg install binutils -y

üîç Utilidades de Binutils:
‚Ä¢ ar: Crea y manipula archivos de bibliotecas est√°ticas
‚Ä¢ ranlib: Genera √≠ndices para archivos de biblioteca para acceso r√°pido
‚Ä¢ as: Ensamblador GNU para compilar c√≥digo ensamblador
‚Ä¢ ld: Enlazador que combina archivos objeto en ejecutables
‚Ä¢ nm, objcopy, objdump, strip: Utilidades para analizar y manipular c√≥digo objeto



üì• PASO 3: Descargar el C√≥digo Fuente de GPUTILS 1.5.2

Descarga el archivo fuente comprimido desde SourceForge:

wget https://sourceforge.net/projects/gputils/files/gputils/1.5.0/gputils-1.5.2.tar.bz2/download -O gputils-1.5.2.tar.bz2

‚ÑπÔ∏è Explicaci√≥n del Comando:
‚Ä¢ wget: Herramienta para descargar archivos
‚Ä¢ -O: Especifica el nombre del archivo descargado localmente
‚Ä¢ El archivo se guardar√° como gputils-1.5.2.tar.bz2 en tu directorio actual

‚è±Ô∏è Tiempo de Descarga:
Dependiendo de tu velocidad de conexi√≥n, esto puede tomar 1-5 minutos aproximadamente.



üìÇ PASO 4: Extraer el C√≥digo Fuente

Una vez descargado, extrae el archivo comprimido:

tar -xjf gputils-1.5.2.tar.bz2
cd gputils-1.5.2

üìã Explicaci√≥n:
‚Ä¢ tar: Comando para manipular archivos empaquetados
‚Ä¢ -xjf: Opciones combinadas:
  - -x: Extraer archivos
  - -j: Descomprimir usando bzip2
  - -f: Especifica el archivo a procesar
‚Ä¢ cd: Cambia al directorio extra√≠do



‚öôÔ∏è PASO 5: Configurar el Proyecto

Configura GPUTILS especificando d√≥nde se instalar√° y qu√© herramientas usar:

./configure AR=ar RANLIB=ranlib --prefix=$PREFIX

üîç Opciones de Configuraci√≥n:
‚Ä¢ ./configure: Script que prepara el proyecto para compilaci√≥n
‚Ä¢ AR=ar: Especifica que se use el archivador ar para crear bibliotecas est√°ticas
‚Ä¢ RANLIB=ranlib: Especifica que se use ranlib para generar √≠ndices de biblioteca
‚Ä¢ --prefix=$PREFIX: Establece que la instalaci√≥n sea en /data/data/com.termux/files/usr

‚ö†Ô∏è Importante:
Si ves mensajes de error, revisa el archivo config.log para diagnosticar problemas:

cat config.log



üî® PASO 6: Compilar GPUTILS

Inicia la compilaci√≥n usando todos los n√∫cleos del procesador disponibles:

make -j$(nproc)

üìã Explicaci√≥n:
‚Ä¢ make: Lee el archivo Makefile y ejecuta las instrucciones de compilaci√≥n
‚Ä¢ -j$(nproc): Paraleliza la compilaci√≥n:
  - -j: Permite compilaci√≥n paralela
  - $(nproc): Detecta autom√°ticamente el n√∫mero de n√∫cleos disponibles
  - Esto acelera significativamente el proceso de compilaci√≥n

‚è±Ô∏è Tiempo de Compilaci√≥n:
Esto puede tomar 2-10 minutos dependiendo del dispositivo. ¬°No interrumpas este proceso!



üíæ PASO 7: Instalar GPUTILS

Una vez completada la compilaci√≥n exitosamente, instala los binarios y archivos:

make install

üìç Ubicaciones de Instalaci√≥n:
‚Ä¢ Binarios: /data/data/com.termux/files/usr/bin/
  - gpasm: Ensamblador de PIC
  - gplink: Enlazador de c√≥digo objeto
  - gplib: Gestor de bibliotecas

‚Ä¢ Librer√≠as: /data/data/com.termux/files/usr/lib/
  - Archivos de biblioteca necesarios para ejecuci√≥n

‚Ä¢ Encabezados: /data/data/com.termux/files/usr/include/
  - Archivos de definici√≥n para desarrollo



‚úÖ PASO 8: Verificar la Instalaci√≥n

Verifica que GPUTILS se instal√≥ correctamente comprobando la versi√≥n de cada herramienta:

gpasm --version
gplink --version
gplib --version

‚ú® Resultado Esperado:
Deber√≠as ver algo como:

gputils-1.5.2
Copyright (c) 1998-2017 James Bowman
Copyright (c) 2007-2016 Craig Franklin



üíª PASO 9: Compilar Programa para PIC16F628A

Crear el Archivo Ensamblador:

Abre el editor nano para crear tu primer programa:

nano blink_628a.asm

üìù C√≥digo Ensamblador - Parpadeo de LED:

Copia el siguiente c√≥digo en el editor:

; Programa para parpadear un LED en PIC16F628A
; LED conectado en RB0 (pin 6)

    LIST P=16F628A
    #include <p16f628a.inc>

; Configuraci√≥n de fusibles
    __CONFIG _CP_OFF & _WDT_OFF & _PWRTE_ON & _INTRC_OSC_NOCLKOUT & _LVP_OFF & _BODEN_OFF & _MCLRE_ON

; Variables para retardo
    CBLOCK 0x20
        d1
        d2
        d3
    ENDC

; Vector de reset
    ORG 0x00
    goto Inicio

; Programa principal
Inicio:
    ; Configurar puertos
    banksel TRISB
    movlw   b'00000000'     ; Todo PORTB como salida
    movwf   TRISB

    banksel CMCON
    movlw   0x07            ; Desactivar comparadores
    movwf   CMCON

    banksel PORTB

; Bucle principal
Bucle:
    ; Encender LED (RB0 = 1)
    bsf     PORTB, 0
    call    Retardo

    ; Apagar LED (RB0 = 0)
    bcf     PORTB, 0
    call    Retardo

    goto    Bucle

; Subrutina de retardo (~500ms a 4MHz)
Retardo:
    movlw   0x03
    movwf   d1
    movlw   0x18
    movwf   d2
    movlw   0x02
    movwf   d3

Retardo_Loop:
    decfsz  d1, f
    goto    $+2
    decfsz  d2, f
    goto    $+2
    decfsz  d3, f
    goto    Retardo_Loop

    return

    END

üíæ Guardar el Archivo:
Presiona CTRL + X, luego Y para confirmar, y ENTER para guardar.

üî® Compilar el C√≥digo:

Compila el programa ensamblador:

gpasm -p p16f628a blink_628a.asm

üìã Explicaci√≥n del Comando:
‚Ä¢ gpasm: Ensamblador de GPUTILS
‚Ä¢ -p p16f628a: Especifica el modelo de PIC a usar
‚Ä¢ blink_628a.asm: Archivo fuente ensamblador

üìÇ Listar Archivos Generados:

Verifica que se crearon los archivos de salida:

ls -la blink_628a.*

‚ú® Archivos Generados:
‚Ä¢ blink_628a.hex: Archivo de c√≥digo m√°quina en formato hexadecimal (para programar el PIC)
‚Ä¢ blink_628a.lst: Archivo de listado con referencias cruzadas
‚Ä¢ blink_628a.cod: Archivo de depuraci√≥n con informaci√≥n del c√≥digo



üìã PASO 10: Copiar Archivo HEX a Descargas

Una vez completada la compilaci√≥n exitosamente, copia el archivo HEX a tu carpeta de Descargas:

cp blink_628a.hex ~/storage/downloads/

üìç Explicaci√≥n:
‚Ä¢ cp: Comando para copiar archivos
‚Ä¢ ~/storage/downloads/: Ruta a la carpeta Descargas de tu dispositivo

‚úÖ Verificar la Copia:

Confirma que el archivo se copi√≥ correctamente:

ls -l ~/storage/downloads/blink_628a.hex



üöÄ PASO 11: Programar el PIC

Ya tienes el archivo HEX listo para programar. Ahora:

üìù Instrucciones Finales:
1. Conecta tu programador PIC k150 a tu dispositivo Android (mediante USB OTG si es necesario)
2. Abre la aplicaci√≥n PIC k150 Programing
3. Selecciona tu modelo de PIC: PIC16F628A
4. Carga el archivo blink_628a.hex desde la carpeta Descargas
5. Verifica que el PIC est√© correctamente insertado en el programador
6. Haz clic en "Programar" o "Program"
7. Espera a que se complete el proceso de programaci√≥n

‚ú® Resultado Esperado:
Una vez programado, tu LED parpadear√° continuamente con un per√≠odo aproximado de 1 segundo (500ms encendido, 500ms apagado).



üí° Consejos y Soluci√≥n de Problemas

‚ö†Ô∏è Error: "command not found"
Si despu√©s de instalar GPUTILS los comandos no se encuentran, a√±ade la ruta a tu PATH:

export PATH=$PREFIX/bin:$PATH
echo 'export PATH=$PREFIX/bin:$PATH' >> ~/.bashrc

‚ö†Ô∏è Error: "Permission denied" al ejecutar gpasm
Aseg√∫rate de que los archivos tienen permisos de ejecuci√≥n:

chmod +x $PREFIX/bin/gpasm
chmod +x $PREFIX/bin/gplink
chmod +x $PREFIX/bin/gplib

‚ö†Ô∏è Error: "ar: not found"
Significa que binutils no se instal√≥ correctamente. Intenta:

pkg remove binutils
pkg install binutils -y
make clean
make -j$(nproc)
make install

üìù Verificar Logs de Compilaci√≥n:
Si hay errores durante la compilaci√≥n, revisa:

cat config.log | grep -i error



üìö Referencias y Recursos Adicionales

‚Ä¢ Sitio oficial de GPUTILS: https://sourceforge.net/projects/gputils/
‚Ä¢ Documentaci√≥n de PIC16F628A: Datasheet disponible en el sitio de Microchip
‚Ä¢ Termux Wiki: https://wiki.termux.com/



‚úÖ ¬°Felicidades!

Has instalado exitosamente GPUTILS 1.5.2 en Termux y compilado tu primer programa para PIC. Ahora puedes crear programas m√°s complejos para tus microcontroladores.