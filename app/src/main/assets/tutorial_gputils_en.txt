GPUTILS 1.5.2 INSTALLATION ON TERMUX FOR ANDROID
For Termux Google Play version


üìã Contents
1. Update Repositories
2. Install Dependencies
3. Download Source Code
4. Extract Files
5. Configure Project
6. Compile GPUTILS
7. Install GPUTILS
8. Verify Installation
9. Compile Program for PIC
10. Copy HEX File



üì¶ STEP 1: Update Termux Repositories

Open the Termux application and update your system packages to ensure you have the latest versions:

pkg update && pkg upgrade -y

‚ÑπÔ∏è Important Notes:
‚Ä¢ This command downloads and installs the latest updates for all packages
‚Ä¢ The -y parameter automatically answers "yes" to any confirmation questions
‚Ä¢ This ensures your Termux has all necessary security patches

üîê Configure Storage Access:
Grant storage permissions to Termux so it can access your files:

termux-setup-storage

‚ÑπÔ∏è Explanation:
This command creates a symbolic link to your external storage. You will need to accept the permission on your Android device.



üîß STEP 2: Install Required Dependencies

Install the compilation tools required to build gputils. Execute the following commands:

pkg install build-essential clang make wget tar bzip2 -y

üìã Installed Packages:
‚Ä¢ build-essential: Contains basic compilation tools (gcc, g++, etc.)
‚Ä¢ clang: Modern C/C++ compiler alternative to GCC (compatible with Termux)
‚Ä¢ make: Automation tool that executes compilation instructions
‚Ä¢ wget: Downloads files from the Internet using command line
‚Ä¢ tar/bzip2: Tools to extract compressed files

Then install the binary utilities:

pkg install binutils -y

üîç Binutils Utilities:
‚Ä¢ ar: Creates and manipulates static library files
‚Ä¢ ranlib: Generates indexes for library files for quick access
‚Ä¢ as: GNU assembler for compiling assembly code
‚Ä¢ ld: Linker that combines object files into executables
‚Ä¢ nm, objcopy, objdump, strip: Utilities for analyzing and manipulating object code



üì• STEP 3: Download GPUTILS 1.5.2 Source Code

Download the compressed source file from SourceForge:

wget https://sourceforge.net/projects/gputils/files/gputils/1.5.0/gputils-1.5.2.tar.bz2/download -O gputils-1.5.2.tar.bz2

‚ÑπÔ∏è Command Explanation:
‚Ä¢ wget: Tool for downloading files
‚Ä¢ -O: Specifies the name of the downloaded file locally
‚Ä¢ The file will be saved as gputils-1.5.2.tar.bz2 in your current directory

‚è±Ô∏è Download Time:
Depending on your connection speed, this may take 1-5 minutes approximately.



üìÇ STEP 4: Extract Source Code

Once downloaded, extract the compressed file:

tar -xjf gputils-1.5.2.tar.bz2
cd gputils-1.5.2

üìã Explanation:
‚Ä¢ tar: Command for manipulating packaged files
‚Ä¢ -xjf: Combined options:
  - -x: Extract files
  - -j: Decompress using bzip2
  - -f: Specifies the file to process
‚Ä¢ cd: Changes to the extracted directory



‚öôÔ∏è STEP 5: Configure the Project

Configure GPUTILS specifying where it will be installed and what tools to use:

./configure AR=ar RANLIB=ranlib --prefix=$PREFIX

üîç Configuration Options:
‚Ä¢ ./configure: Script that prepares the project for compilation
‚Ä¢ AR=ar: Specifies that the ar archiver be used to create static libraries
‚Ä¢ RANLIB=ranlib: Specifies that ranlib be used to generate library indexes
‚Ä¢ --prefix=$PREFIX: Sets the installation path to /data/data/com.termux/files/usr

‚ö†Ô∏è Important:
If you see error messages, check the config.log file to diagnose problems:

cat config.log



üî® STEP 6: Compile GPUTILS

Start the compilation using all available processor cores:

make -j$(nproc)

üìã Explanation:
‚Ä¢ make: Reads the Makefile and executes compilation instructions
‚Ä¢ -j$(nproc): Parallelizes compilation:
  - -j: Enables parallel compilation
  - $(nproc): Automatically detects the number of available cores
  - This significantly speeds up the compilation process

‚è±Ô∏è Compilation Time:
This may take 2-10 minutes depending on your device. Do not interrupt this process!



üíæ STEP 7: Install GPUTILS

Once compilation completes successfully, install the binaries and files:

make install

üìç Installation Locations:
‚Ä¢ Binaries: /data/data/com.termux/files/usr/bin/
  - gpasm: PIC assembler
  - gplink: Object code linker
  - gplib: Library manager

‚Ä¢ Libraries: /data/data/com.termux/files/usr/lib/
  - Library files needed for execution

‚Ä¢ Headers: /data/data/com.termux/files/usr/include/
  - Definition files for development



‚úÖ STEP 8: Verify the Installation

Verify that GPUTILS installed correctly by checking the version of each tool:

gpasm --version
gplink --version
gplib --version

‚ú® Expected Result:
You should see something like:

gputils-1.5.2
Copyright (c) 1998-2017 James Bowman
Copyright (c) 2007-2016 Craig Franklin



üíª STEP 9: Compile Program for PIC16F628A

Create the Assembler File:

Open the nano editor to create your first program:

nano blink_628a.asm

üìù Assembler Code - LED Blink:

Copy the following code in the editor:

; Program to blink an LED on PIC16F628A
; LED connected to RB0 (pin 6)

    LIST P=16F628A
    #include <p16f628a.inc>

; Fuse configuration
    __CONFIG _CP_OFF & _WDT_OFF & _PWRTE_ON & _INTRC_OSC_NOCLKOUT & _LVP_OFF & _BODEN_OFF & _MCLRE_ON

; Delay variables
    CBLOCK 0x20
        d1
        d2
        d3
    ENDC

; Reset vector
    ORG 0x00
    goto Inicio

; Main program
Inicio:
    ; Configure ports
    banksel TRISB
    movlw   b'00000000'     ; All PORTB as output
    movwf   TRISB

    banksel CMCON
    movlw   0x07            ; Disable comparators
    movwf   CMCON

    banksel PORTB

; Main loop
Bucle:
    ; Turn on LED (RB0 = 1)
    bsf     PORTB, 0
    call    Retardo

    ; Turn off LED (RB0 = 0)
    bcf     PORTB, 0
    call    Retardo

    goto    Bucle

; Delay subroutine (~500ms at 4MHz)
Retardo:
    movlw   0x03
    movwf   d1
    movlw   0x18
    movwf   d2
    movlw   0x02
    movwf   d3

Retardo_Loop:
    decfsz  d1, f
    goto    $+2
    decfsz  d2, f
    goto    $+2
    decfsz  d3, f
    goto    Retardo_Loop

    return

    END

üíæ Save the File:
Press CTRL + X, then Y to confirm, and ENTER to save.

üî® Compile the Code:

Compile the assembly program:

gpasm -p p16f628a blink_628a.asm

üìã Command Explanation:
‚Ä¢ gpasm: GPUTILS assembler
‚Ä¢ -p p16f628a: Specifies the PIC model to use
‚Ä¢ blink_628a.asm: Assembly source file

üìÇ List Generated Files:

Verify that the output files were created:

ls -la blink_628a.*

‚ú® Generated Files:
‚Ä¢ blink_628a.hex: Machine code file in hexadecimal format (to program the PIC)
‚Ä¢ blink_628a.lst: Listing file with cross-references
‚Ä¢ blink_628a.cod: Debug file with code information



üìã STEP 10: Copy HEX File to Downloads

Once compilation completes successfully, copy the HEX file to your Downloads folder:

cp blink_628a.hex ~/storage/downloads/

üìç Explanation:
‚Ä¢ cp: Command to copy files
‚Ä¢ ~/storage/downloads/: Path to your device's Downloads folder

‚úÖ Verify the Copy:

Confirm that the file was copied successfully:

ls -l ~/storage/downloads/blink_628a.hex



üöÄ STEP 11: Program the PIC

You now have the HEX file ready to program. Now:

üìù Final Instructions:
1. Connect your PIC k150 programmer to your Android device (via USB OTG if necessary)
2. Open the PIC k150 Programing application
3. Select your PIC model: PIC16F628A
4. Load the blink_628a.hex file from the Downloads folder
5. Verify that the PIC is correctly inserted in the programmer
6. Click "Program" or "Program"
7. Wait for the programming process to complete

‚ú® Expected Result:
Once programmed, your LED will blink continuously with an approximate period of 1 second (500ms on, 500ms off).



üí° Tips and Troubleshooting

‚ö†Ô∏è Error: "command not found"
If GPUTILS commands are not found after installation, add the path to your PATH:

export PATH=$PREFIX/bin:$PATH
echo 'export PATH=$PREFIX/bin:$PATH' >> ~/.bashrc

‚ö†Ô∏è Error: "Permission denied" when running gpasm
Make sure the files have execution permissions:

chmod +x $PREFIX/bin/gpasm
chmod +x $PREFIX/bin/gplink
chmod +x $PREFIX/bin/gplib

‚ö†Ô∏è Error: "ar: not found"
This means binutils was not installed correctly. Try:

pkg remove binutils
pkg install binutils -y
make clean
make -j$(nproc)
make install

üìù Check Compilation Logs:
If there are errors during compilation, check:

cat config.log | grep -i error



üìö References and Additional Resources

‚Ä¢ GPUTILS Official Site: https://sourceforge.net/projects/gputils/
‚Ä¢ PIC16F628A Documentation: Datasheet available on the Microchip website
‚Ä¢ Termux Wiki: https://wiki.termux.com/



‚úÖ Congratulations!

You have successfully installed GPUTILS 1.5.2 on Termux and compiled your first PIC program. Now you can create more complex programs for your microcontrollers.